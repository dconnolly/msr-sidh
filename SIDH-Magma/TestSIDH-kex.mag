////////////////////////////////////////////////////////////////////////////////
//                                                                   
// Code for SIDH key exchange with optional public key compression           
// 
// (c) 2016 Microsoft Corporation. All rights reserved.      
//                                                                   
////////////////////////////////////////////////////////////////////////////////
// 
// TestSIDH-kex.mag 
// 
// Test file that demonstrates and tests SIDH key exchange without public key 
// compression (function kextest) and with public key compression (function
// kextest_compress).  
// 
// For the 4 stages of SIDH key exchange (i.e. Alice's key generation, Bob's 
// key generation, Alice's shared secret and Bob's shared secret computation),
// the isogeny computation/evaluation can be performed using two different 
// strategies: 
// (1) the slow but simple "scalar-multiplication-based" strategy.
// (2) a fast way to traverse the isogeny tree using an optimal strategy.
//
// The function kextest can be run using the fast computations (2) only by
// setting the input boolean simple:=false. If one sets simple:=true, then the
// computation is done using the simple algorithm (1) and the fast algorithm (2)
// and the results from both are asserted to be equal.
//
////////////////////////////////////////////////////////////////////////////////
//  
// References: 
//                                                            
// Efficient algorithms for supersingular isogeny Diffie-Hellman 
// Craig Costello, Patrick Longa, Michael Naehrig, CRYPTO 2016.         
//                                                                               
// Efficient compression of SIDH public keys
// Craig Costello, David Jao, Patrick Longa, Michael Naehrig, Joost Renes, 
// David Urbanik, EUROCRYPT 2017.     
// 
////////////////////////////////////////////////////////////////////////////////

clear;
load "SIDH-parameters.mag";
load "SIDH-field-arithmetic.mag";
load "SIDH-curve-and-isogeny-arithmetic.mag";
load "SIDH.mag";
load "SIDH-pairings.mag";
load "SIDH-pohlig-hellman.mag";
load "SIDH-compression.mag";

////////////////////////////////////////////////////////////////////////////////
///////////////////////// Key exchange testing /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

kextest := procedure(n, simple)
    for j in [1..n] do
        "\n";
        j;
        "====================================================================";
        "Generating secret keys...";
        SK_Alice:=Random(1, (oA div lA)-1)*lA; // Random even number between 1 and oA-1 
        SK_Bob:=Random(1, (oB div lB)-1)*lB; // Random multiple of lB between 1 and oB-1 
        "Done with secret keys.";
        "====================================================================";

        "Generating Alice's public key... (fast algorithm).";
        PK_Alice:=keygen_Alice_fast(SK_Alice,params_Alice,splits_Alice,MAX_Alice);
        if simple then
            "Generating Alice's public key... (simple algorithm).";
            PK_Alice_simple:=keygen_Alice_simple(SK_Alice,params_Alice);
            equal := PK_Alice eq PK_Alice_simple;
            "Result from simple key gen equal to result from fast key gen?", equal; 
            assert equal;
        end if;
        "\nDone with Alice's public key.";
        "====================================================================";

        "Generating Bob's public key... (fast algorithm).";
        PK_Bob:=keygen_Bob_fast(SK_Bob,params_Bob,splits_Bob,MAX_Bob);
        if simple then
            "Generating Bob's public key... (simple algorithm).";
            PK_Bob_simple:=keygen_Bob_simple(SK_Bob,params_Bob);
            equal := PK_Bob eq PK_Bob_simple;
            "Result from simple key gen equal to result from fast key gen?", equal; 
            assert equal;
        end if;
        "\nDone with Bob's public key.\n";

        "Generating shared secret for Alice... (fast algorithm).";
        secret_Alice:=shared_secret_Alice_fast(SK_Alice,PK_Bob,params_Alice,splits_Alice,MAX_Alice);
        if simple then
            "Generating shared secret for Alice... (simple algorithm).";
            secret_Alice_simple:=shared_secret_Alice_simple(SK_Alice,PK_Bob);
            equal := secret_Alice eq secret_Alice_simple;
            "Results from simple and fast algorithms equal?", equal; 
            assert equal;
        end if;
        "\nDone with Alice's shared secret computation.";
        "====================================================================";

        "Generating shared secret for Bob... (fast algorithm).";
        secret_Bob:=shared_secret_Bob_fast(SK_Bob,PK_Alice,params_Bob,splits_Bob,MAX_Bob);
        if simple then
            "Generating shared secret for Bob... (simple algorithm).";
            secret_Bob_simple:=shared_secret_Bob_simple(SK_Bob,PK_Alice);
            equal := secret_Bob eq secret_Bob_simple;
            "Results from simple and fast algorithms equal?", equal; 
            assert equal;
        end if;
        "\nDone with Bob's shared secret computation.";

        "====================================================================";
        "Shared secrets are equal?", secret_Alice eq secret_Bob;
        assert secret_Alice eq secret_Bob;
        "====================================================================\n";
    end for;
end procedure;

////////////////////////////////////////////////////////////////////////////////
///////////////// Key exchange testing with compression ////////////////////////
////////////////////////////////////////////////////////////////////////////////

kextest_compress := procedure(n)
    for j in [1..n] do
        "\n";
        j;
        "====================================================================";
        "Generating secret keys...";
        SK_Alice:=Random(1, (oA div lA)-1)*lA; // Random even number between 1 and oA-1 
        SK_Bob:=Random(1, (oB div lB)-1)*lB; // Random multiple of lB between 1 and oB-1 
        "Done with secret keys.";
        "====================================================================";

        "Generating Alice's public key... (fast algorithm).";
        PK_Alice:=keygen_Alice_fast(SK_Alice,params_Alice,splits_Alice,MAX_Alice);
        "Compressing Alice's public key.";
        PK_Alice_comp_0, PK_Alice_comp_1 := compress_3_torsion(PK_Alice); 

        "\nDone with Alice's public key.";
        "====================================================================";

        "Generating Bob's public key... (fast algorithm).";
        PK_Bob:=keygen_Bob_fast(SK_Bob,params_Bob,splits_Bob,MAX_Bob);
        "Compressing Bob's public key.";
        PK_Bob_comp_0, PK_Bob_comp_1 := compress_2_torsion(PK_Bob); 

        "\nDone with Bob's public key.\n";

        "Decompressing Bob's public key and";
        "generating shared secret for Alice... (fast algorithm).";
        secret_Alice:=shared_secret_Alice_decompression(SK_Alice,PK_Bob_comp_0,PK_Bob_comp_1,params_Alice,splits_Alice,MAX_Alice);

        "Done with Alice's shared secret computation.";
        "====================================================================";

        "Decompressing Alice's public key and";
        "generating shared secret for Bob... (fast algorithm).";
        secret_Bob:=shared_secret_Bob_decompression(SK_Bob,PK_Alice_comp_0,PK_Alice_comp_1,params_Bob,splits_Bob,MAX_Bob);
//        secret_Bob:=shared_secret_Bob_fast(SK_Bob,PK_Alice,params_Bob,splits_Bob,MAX_Bob);
        "\nDone with Bob's shared secret computation.";
        "====================================================================";
        "Shared secrets are equal?", secret_Alice eq secret_Bob;
        assert secret_Alice eq secret_Bob;
        "====================================================================\n";
    end for;
end procedure;



simple := false;
"\n\n\n";
"====================================================================";
"====================================================================";
"=== Testing SIDH ephemeral key exchange ============================";
if simple then
"=== Including simple, but slow isogeny tree traversal ==============";
else
"=== Only fast isogeny tree traversal via optimal strategy ==========";
end if;
"====================================================================";
kextest(10, simple);

"\n\n\n";
"====================================================================";
"====================================================================";
"=== Testing SIDH ephemeral key exchange with PK compression ========";
"=== Only fast isogeny tree traversal via optimal strategy ==========";
"====================================================================";
kextest_compress(10);

