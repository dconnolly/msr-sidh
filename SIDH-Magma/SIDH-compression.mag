////////////////////////////////////////////////////////////////////////////////
//                                                                   
// Code for SIDH key exchange with optional public key compression            
// 
// (c) 2016 Microsoft Corporation. All rights reserved.     
//                                                                   
////////////////////////////////////////////////////////////////////////////////
// 
// SIDH-compression.mag 
// 
// This file contains functions for public-key compression and decompression as
// well as adjusted functions for computing the shared secret that merge
// decompression into the shared secret computation. 
// 
////////////////////////////////////////////////////////////////////////////////
//  
// References: 
//                                                            
// Efficient algorithms for supersingular isogeny Diffie-Hellman 
// Craig Costello, Patrick Longa, Michael Naehrig, CRYPTO 2016.         
//                                                                               
// Efficient compression of SIDH public keys
// Craig Costello, David Jao, Patrick Longa, Michael Naehrig, Joost Renes, 
// David Urbanik, EUROCRYPT 2017.     
// 
////////////////////////////////////////////////////////////////////////////////


compress_2_torsion := function(PK)
    phP,phQ,phX,A := recover_y(PK); 

    XP,YP,ZP,XQ,YQ,ZQ:=generate_2_torsion_basis(A);
    Zinv := mont_n_way_inv([phP[3],phQ[3]],2); 
    R1 := [XP,YP,ZP];
    R2 := [XQ,YQ,ZQ];
    phiP := [phP[1]*Zinv[1],phP[2]*Zinv[1]]; 
    phiQ := [phQ[1]*Zinv[2],phQ[2]*Zinv[2]]; 

    a0,b0,a1,b1 := ph_2(phiP,phiQ,R1,R2,A);
    if a0 lt 0 then a0 +:= oA; end if;
    if b0 lt 0 then b0 +:= oA; end if;
    if a1 lt 0 then a1 +:= oA; end if;
    if b1 lt 0 then b1 +:= oA; end if;
    
    if (a0 mod lA) ne 0 then
        a0inv := Modinv(a0, oA);
        comp := [0, (b0*a0inv) mod oA, (a1*a0inv) mod oA, (b1*a0inv) mod oA];
    else 
        b0inv := Modinv(b0, oA);
        comp := [1, (a0*b0inv) mod oA, (a1*b0inv) mod oA, (b1*b0inv) mod oA];
    end if;    
    // comp is the compressed form of [phiP,phiQ]

    return comp,A; 
    // comp and A together are 1 + 3*372 + 2*751 = 2619 bits = 328 bytes.
end function;

compress_3_torsion := function(PK)
    phP,phQ,phX,A := recover_y(PK); 

    XP,YP,ZP,XQ,YQ,ZQ:=generate_3_torsion_basis(A);
    Zinv := mont_n_way_inv([ZP,ZQ,phP[3],phQ[3]],4); 
    R1 := [XP*Zinv[1],YP*Zinv[1]]; 
    R2 := [XQ*Zinv[2],YQ*Zinv[2]];
    phiP := [phP[1]*Zinv[3],phP[2]*Zinv[3]]; 
    phiQ := [phQ[1]*Zinv[4],phQ[2]*Zinv[4]]; 

    a0,b0,a1,b1 := ph_3(phiP,phiQ,R1,R2,A);
    if a0 lt 0 then a0 +:= oB; end if;
    if b0 lt 0 then b0 +:= oB; end if;
    if a1 lt 0 then a1 +:= oB; end if;
    if b1 lt 0 then b1 +:= oB; end if;
    
    if a0 mod lB ne 0 then
        a0inv := Modinv(a0, oB);
        comp := [0, b0*a0inv mod oB, a1*a0inv mod oB, b1*a0inv mod oB];
    else 
        b0inv := Modinv(b0, oB);
        comp := [1, a0*b0inv mod oB, a1*b0inv mod oB, b1*b0inv mod oB];
    end if;    
    // comp together with A is the compressed form of [phiP,phiQ]

    return comp,A; 
    // comp and A together are 1 + 3*379 + 2*751 = 2640 bits = 330 bytes.
end function;

decompress_2_torsion_fast := function(SK,comp,A)
    X1,Y1,Z1,X2,Y2,Z2 := generate_2_torsion_basis(A);

    // normalize basis points
    invs:=mont_n_way_inv([Z1,Z2],2);
    R1X := X1*invs[1];
    R1Y := Y1*invs[1];
    R2X := X2*invs[2];
    R2Y := Y2*invs[2];
    R1 := [R1X,R1Y];
    R2 := [R2X,R2Y];

    A24:=A+2;
    A24:=A24/2;
    A24:=A24/2;

    if comp[1] eq 0 then
        inv := Modinv(1+SK*comp[3],oA);
        scal := ((comp[2]+SK*comp[4])*inv) mod oA;
        X0,Y0,Z0 := mont_twodim_scalarmult(scal,R1,R2,A,A24);        
    else
        inv := Modinv(1+SK*comp[4],oA);
        scal := ((comp[2]+SK*comp[3])*inv) mod oA;
        X0,Y0,Z0 := mont_twodim_scalarmult(scal,R2,R1,A,A24);
    end if;

    return X0,Z0;
end function;

decompress_3_torsion_fast := function(SK,comp,A)
    X1,Y1,Z1,X2,Y2,Z2 := generate_3_torsion_basis(A);

    // normalize basis points
    invs:=mont_n_way_inv([Z1,Z2],2);
    R1X := X1*invs[1];
    R1Y := Y1*invs[1];
    R2X := X2*invs[2];
    R2Y := Y2*invs[2];
    R1 := [R1X,R1Y];
    R2 := [R2X,R2Y];

    A24:=A+2;
    A24:=A24/2;
    A24:=A24/2;

    if comp[1] eq 0 then
        inv := Modinv(1+SK*comp[3],oB);
        scal := (comp[2]+SK*comp[4])*inv mod oB;
        X0,Y0,Z0 := mont_twodim_scalarmult(scal,R1,R2,A,A24);
    else
        inv := Modinv(1+SK*comp[4],oB);
        scal := (comp[2]+SK*comp[3])*inv mod oB;
        X0,Y0,Z0 := mont_twodim_scalarmult(scal,R2,R1,A,A24);
    end if;

    return X0,Z0;
end function;

shared_secret_Alice_decompression:=function(SK_Alice,PK_Bob_comp_0,PK_Bob_comp_1,params,splits,MAX)

    /*
    This function generates Alice's shared secret from her secret key and Bob's
    compressed public key. It uses the optimal way of traversing the isogeny tree as
    described by De Feo, Jao and Plut. 
    
    Input: 
    - Alice's secret key SK_Alice, a random even number between 1 and oA-1,
    - Bob's compressed public key PK_Bob_comp=[PK_Bob_comp_0,PK_Bob_comp_1],
    - the parameter "splits", a vector that guides the optimal route through the 
      isogeny tree; it is generated individually for Alice using 
      "optimalstrategies.m" and the ratios of 4-isogeny evaluation versus 
      multiplication-by-4,
    - the parameter "MAX", the maximum number of multiplication-by-4
      computations.

    Output: 
    - Alice's shared secret: the j-invariant of E_AB.
    */

    A:=PK_Bob_comp_1; 
    RX,RZ:=decompress_2_torsion_fast(SK_Alice,PK_Bob_comp_0,A);

    C:=1;  // starting on Bob's Montgomery curve

	isos:=0; mulm:=0;

    // the first iteration is different so not in the main loop
    RX,RZ,A,C:=first_4_isog(RX,RZ,A); isos+:=1;

	pts:=[];
	index:=0;

    // Alice's main loop
	for row:=1 to MAX-1 do

        // multiply (RX:RZ) until it has order 4, and store intermediate points
        while index lt (MAX - row) do
            Append(~pts, [RX,RZ,index]);
            m := splits[MAX-index-row+1];
	        RX,RZ:=xDBLe(RX,RZ,A,C,2*m); mulm +:= m;
            index +:= m;
        end while;

        // compute the 4-isogeny based on kernel (RX:RZ)
		A,C,consts:=get_4_isog(RX,RZ); 
        // evaluate the 4-isogeny at every point in pts
	    for i:=1 to #pts do 
	    	pts[i][1],pts[i][2]:=eval_4_isog(consts,pts[i][1],pts[i][2]); 
            isos+:=1;
	    end for;

        // R becomes the last point in pts and then pts is pruned
		RX:=pts[#pts][1]; 
	    RZ:=pts[#pts][2]; 
	    index:=Integers()!pts[#pts][3];	

		Prune(~pts);

	end for;
    // compute the last 4-isogeny
	A,C,consts:=get_4_isog(RX,RZ); 

    // compute the j Invariant of E_AB
    shared_secret_Alice:=j_inv(A,C);

    "Alice FAST secret requires: ", mulm, "muls-by-4 and ", isos, "4-isogenies";

    return shared_secret_Alice;

end function;

shared_secret_Bob_decompression:=function(SK_Bob,PK_Alice_comp_0,PK_Alice_comp_1,params,splits,MAX)

    /*
    This function generates Bob's shared secret from his secret key and Alice's
    public key. It uses the optimal way of traversing the isogeny tree as
    described by De Feo, Jao and Plut. 
    
    Input: 
    - Bob's secret key SK_Bob, a random number between 1 and oB-1,
    - Alice's public key PK_Alice=[phi_A(xPB),phi_A(xQB),phi_A(x(QB-PB))],
    - the parameter "splits", a vector that guides the optimal route through the 
      isogeny tree; it is generated individually for Bob using 
      "optimalstrategies.m" and the ratios of 3-isogeny evaluation versus 
      multiplication-by-3,
    - the parameter "MAX", the maximum number of multiplication-by-3
      computations.

    Output: 
    - Bob's shared secret: the j-invariant of E_BA.
    */

    A:=PK_Alice_comp_1; 
    RX,RZ:=decompress_3_torsion_fast(SK_Bob,PK_Alice_comp_0,A);
    C:=1; // starting on Alice's Montgomery curve

	pts:=[];
	index:=0;
	
	isos:=0; mulm:=0;

    // Bob's main loop
	for row:=1 to MAX-1 do

        // multiply (RX:RZ) until it has order 3, and store intermediate points
        while index lt (MAX - row) do
            Append(~pts, [RX,RZ,index]);
            m := splits[MAX-index-row+1];
	        RX,RZ:=xTPLe(RX,RZ,A,C,m); mulm +:= m;
            index +:= m;
        end while;

        // compute the 3-isogeny based on kernel (RX:RZ)
		A,C:=get_3_isog(RX,RZ); 

        // evaluate the 3-isogeny at every point in pts
	    for i:=1 to #pts do 
	    	pts[i][1],pts[i][2]:=eval_3_isog(RX,RZ,pts[i][1],pts[i][2]); 
            isos+:=1;
	    end for;

        // R becomes the last point in pts and then pts is pruned
		RX:=pts[#pts][1]; 
	    RZ:=pts[#pts][2]; 
	    index:=Integers()!pts[#pts][3];	

		Prune(~pts);

	end for;

    // compute the last 3-isogeny
	A,C:=get_3_isog(RX,RZ); 

    // compute the j Invariant of E_BA
    shared_secret_Bob:=j_inv(A,C);

    "Bob FAST secret requires: ", mulm, "muls-by-3 and ", isos, "3-isogenies";

    return shared_secret_Bob;

end function;


