////////////////////////////////////////////////////////////////////////////////
//                                                                   
// Code for SIDH key exchange with optional public key compression           
// 
// (c) 2016 Microsoft Corporation. All rights reserved.        
//                                                                   
////////////////////////////////////////////////////////////////////////////////
// 
// SIDH-pohlig-hellman.mag 
// 
// Implements the Pohlig-Hellman algorithm to compute discrete logarithms in the
// 2- and 3-torsion subgroups, respectively. Different sub-routines reflect the
// windowed Pohlig-Hellman approach.  
// 
////////////////////////////////////////////////////////////////////////////////
//  
// References: 
//                                                            
// Efficient algorithms for supersingular isogeny Diffie-Hellman 
// Craig Costello, Patrick Longa, Michael Naehrig, CRYPTO 2016.         
//                                                                               
// Efficient compression of SIDH public keys
// Craig Costello, David Jao, Patrick Longa, Michael Naehrig, Joost Renes, 
// David Urbanik, EUROCRYPT 2017.     
// 
////////////////////////////////////////////////////////////////////////////////

//////////////////////////////
// Two torsion
//////////////////////////////

phn1_2 := function(q,LUT,a)
            u := q;
            alpha_i := 0;
            for l in [0..a-2] do
                v := u;
                for h in [1..a-1-l] do
                    v := sqr_Fp2_cycl(v); 
                end for;
                if v ne 1 then
                    alpha_i +:= 2^l;
                    tmp := LUT[7-a+l];
                    u := u*tmp; 
                end if;
            end for;
            if u ne 1 then
                alpha_i +:= 2^(a-1);
            end if;

            return alpha_i;
end function;

phn5_2 := function(q,LUT,LUT_1)
        alpha_k := 0;
        u := q;
        for ii in [0..3] do
            v := u;
            v := sqr_Fp2_cycl(v);
            for j in [1..5*(3-ii)] do
                v := sqr_Fp2_cycl(v); 
            end for;
            alpha_i := phn1_2(v,LUT,5); // u order 5

            alpha_k +:= alpha_i*(2^(5*ii));
            tmp := exp_Fp2_cycl(LUT_1[1+ii],alpha_i); 
            u *:= tmp; 
        end for;
        // Do the last part
        if u ne 1 then // u order 2
            alpha_k+:=2^(20);
        end if;

        return alpha_k;
end function;

phn21_2 := function(q,LUT,LUT_0,LUT_1)
        alpha_k := 0;
        u := q;
        for ii in [0..2] do
            v := u;
            for j in [1..21*(3-ii)] do
                v := sqr_Fp2_cycl(v); 
            end for;
            alpha_i := phn5_2(v,LUT,LUT_1); // u order 21

            alpha_k +:= alpha_i*(2^(21*ii));
            tmp := exp_Fp2_cycl(LUT_0[1+ii],alpha_i);
            u *:= tmp; 
        end for;
        alpha_i := phn5_2(u,LUT,LUT_1); // u order 21
        alpha_k +:= alpha_i*(2^63);

        return alpha_k;
end function;

phn84_2 := function(r,t_ori,LUT,LUT_0,LUT_1,LUT_3)
    alpha:=0;

    t := r;
    for k in [0..3] do
        u := t;
        for ii in [1..36] do
            u := sqr_Fp2_cycl(u); 
        end for;
        for ii in [1..84*(3-k)] do
            u := sqr_Fp2_cycl(u); 
        end for;
        alpha_k := phn21_2(u,LUT,LUT_0,LUT_1); // q order 2^84

        alpha +:= 2^(84*k)*alpha_k;
        tmp := exp_Fp2_cycl(t_ori[1+k],alpha_k); 
        t *:= tmp; 
    end for;
    // Do the last part
    for ii in [0..4] do
        u := t;
        for j in [1..6*(5-ii)] do
            u := sqr_Fp2_cycl(u); 
        end for;
        alpha_i := phn1_2(u,LUT,6); // u order 2^6

        alpha +:= alpha_i*(2^(336+6*ii));
        tmp := exp_Fp2_cycl(LUT_3[1+ii],alpha_i); 
        t *:= tmp; 
    end for;
    alpha_i := phn1_2(t,LUT,6); // u order 2^6
    alpha +:= alpha_i*(2^(366));

    return alpha;
end function;

////////////////////////////

build_LUTs_2 := function(g)
    // Build (small) tables
    tmp:=g;
    tmp := inv_Fp2_cycl(tmp);
    t_ori:=[tmp]; // order 2^372
    for ii in [1..3] do
        for j in [1..84] do
            tmp := sqr_Fp2_cycl(tmp);
        end for;
        Append(~t_ori,tmp); // order 2^288 & 2^204 & 2^120
    end for;
    for ii in [1..36] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    Append(~t_ori,tmp); // order 2^84

    LUT_0:=[tmp]; // order 2^84
    for ii in [1..2] do
        for j in [1..21] do
            tmp := sqr_Fp2_cycl(tmp);
        end for;
        Append(~LUT_0,tmp); // order 2^63 & 2^42
    end for;
    for j in [1..6] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    LUT_3:=[tmp]; // order 2^36
    for j in [1..6] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    LUT_3[2]:=tmp; // order 2^30
    for j in [1..6] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    LUT_3[3]:=tmp; // order 2^24
    for j in [1..3] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    Append(~LUT_0,tmp); // order 2^21

    LUT_1:=[LUT_0[4]]; // order 2^21
    for ii in [1..3] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    LUT_3[4]:=tmp; // order 2^18
    for ii in [1..2] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    Append(~LUT_1,tmp); // order 2^16
    for j in [1..4] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    LUT_3[5]:=tmp; // order 2^12
    tmp := sqr_Fp2_cycl(tmp);
    Append(~LUT_1,tmp); // order 2^11
    for j in [1..5] do
        tmp := sqr_Fp2_cycl(tmp);
    end for;
    Append(~LUT_1,tmp); // order 2^16 & 2^11 & 2^6
    Append(~LUT_3,tmp);

    LUT := [LUT_3[6]];
    for ii in [1..4] do
        Append(~LUT, sqr_Fp2_cycl(LUT[ii])); // order 2^5 -- 2^1
    end for;

    return t_ori, LUT, LUT_0, LUT_1, LUT_3;
end function;


ph_2 := function(phiP,phiQ,PS,QS,A);

    eqp,r0,t0,r1,t1 := Tate_pairings_2_torsion(QS,PS,phiP,phiQ,A);
         
    //n := [84,36,21,0,5,1,0,0,6,0];

    t_ori, LUT, LUT_0, LUT_1, LUT_3 := build_LUTs_2(eqp);    

    // Finish computation
    a0 := phn84_2(r0,t_ori,LUT,LUT_0,LUT_1,LUT_3);
    b0 := phn84_2(r1,t_ori,LUT,LUT_0,LUT_1,LUT_3);
    b0 := 2^372-b0;
    a1 := phn84_2(t0,t_ori,LUT,LUT_0,LUT_1,LUT_3);
    b1 := phn84_2(t1,t_ori,LUT,LUT_0,LUT_1,LUT_3);
    b1 := 2^372-b1;

    return a0,b0,a1,b1;
end function;


//////////////////////////////
// Three torsion
//////////////////////////////

phn1_3 := function(q,LUT,a)
            u := q;
            alpha_i := 0;
            for l in [0..a-2] do
                v := u;
                for h in [1..a-1-l] do
                    v := cube_Fp2_cycl(v); 
                end for;

                if v eq LUT[4] then
                    alpha_i +:= 3^l;
                    tmp := LUT[4-a+l];
                    u := u*tmp; 
                else
                    if not v eq 1 then
                        alpha_i +:= 2*3^l;
                        tmp := LUT[4-a+l]^2;
                        u := u*tmp; 
                    end if; 
                end if;
            end for;

            if u eq LUT[4] then
                alpha_i +:= 3^(a-1);
            else 
                if not u eq 1 then
                    alpha_i +:= 2*3^(a-1);
                end if;
            end if;

            return alpha_i;
end function;

phn3_3 := function(q,LUT,LUT_1)
        alpha := 0;
        u := q;
        for i in [0..3] do
            v := u;
            for j in [1..3*(4-i)] do
                v := cube_Fp2_cycl(v); 
            end for;
            alpha_i := phn1_3(v,LUT,3); // u order 3^3

            alpha +:= alpha_i*(3^(3*i));
            tmp := exp_Fp2_cycl(LUT_1[1+i],alpha_i); 
            u *:= tmp; 
        end for;
        alpha_i := phn1_3(u,LUT,3); // q order 3^3
        alpha +:= alpha_i*(3^12);

        return alpha;
end function;

phn15_l_3 := function(q,LUT,LUT_0,LUT_1)
        alpha := 0;
        u := q;
        for i in [0..2] do
            v := u;
            for j in [1..11] do
                v := cube_Fp2_cycl(v); 
            end for;
            for j in [1..15*(2-i)] do
                v := cube_Fp2_cycl(v); 
            end for;
            alpha_i := phn3_3(v,LUT,LUT_1); // u order 3^15
            alpha +:= alpha_i*(3^(15*i));
            v := LUT_0[1+i];
            for j in [1..5] do
                v := cube_Fp2_cycl(v); 
            end for;
            tmp := exp_Fp2_cycl(v,alpha_i); 
            u *:= tmp; 
        end for;

        // Do the last part
        alpha_n := 0;
        for i in [0..2] do
            v := u;
            for j in [1..2] do
                v := cube_Fp2_cycl(v); 
            end for;
            for j in [1..3*(2-i)] do 
                v := cube_Fp2_cycl(v); 
            end for;

            alpha_i := phn1_3(v,LUT,3); // u order 3^3
            alpha_n +:= alpha_i*(3^(3*i));

            v := LUT_1[1+i];
            for j in [1..4] do
                v := cube_Fp2_cycl(v); 
            end for;
            tmp := exp_Fp2_cycl(v,alpha_i); 
            u *:= tmp; 
        end for;

        // And the final part
        alpha_i := phn1_3(u,LUT,2); // q order 3^2 
        alpha_n +:= alpha_i*(3^9);
        alpha +:= alpha_n*(3^45);


        return alpha;
end function;

phn15_3 := function(q,LUT,LUT_0,LUT_1)
        alpha := 0;
        u := q;
        for i in [0..2] do
            v := u;
            v := cube_Fp2_cycl(v); 
            for j in [1..15*(3-i)] do
                v := cube_Fp2_cycl(v); 
            end for;
            alpha_i := phn3_3(v,LUT,LUT_1); // u order 3^15
            alpha +:= alpha_i*(3^(15*i));
            tmp := exp_Fp2_cycl(LUT_0[1+i],alpha_i); 
            u *:= tmp; 
        end for;
        v := u;
        v := cube_Fp2_cycl(v); 
        alpha_i := phn3_3(v,LUT,LUT_1); // u order 3^15
        alpha +:= alpha_i*(3^(45));
        tmp := exp_Fp2_cycl(LUT_0[4],alpha_i); 
        u *:= tmp; 

        // Do the last part
        if u eq LUT[4] then
            alpha +:= 3^(60);
        else 
            if  not u eq 1 then 
                alpha +:= 2*3^(60);
            end if;
        end if;
     
        return alpha;
end function;

phn61_3 := function(r,t_ori,LUT,LUT_0,LUT_1)
    alpha:=0;

    // Start the main loop
    u := r;
    for k in [0..2] do
        v := u;
        for i in [1..56] do
            v := cube_Fp2_cycl(v); 
        end for;
        for i in [1..61*(2-k)] do
            v := cube_Fp2_cycl(v); 
        end for;
        alpha_k := phn15_3(v,LUT,LUT_0,LUT_1); // q order 3^61
        alpha +:= 3^(61*k)*alpha_k;

        tmp := exp_Fp2_cycl(t_ori[1+k],alpha_k); 
        u *:= tmp; 
    end for;
    alpha_n := phn15_l_3(u,LUT,LUT_0,LUT_1);  // t order 3^56
    alpha+:=alpha_n*3^(183);

    return alpha;
end function;

////////////////////////////

build_LUTs_3 := function(g)
    // Build (small) tables
    tmp := g;
    tmp := inv_Fp2_cycl(tmp);
    t_ori:=[tmp]; // g order 3^239
    for i in [1..2] do 
        for j in [1..61] do
            tmp := cube_Fp2_cycl(tmp); 
        end for;
        Append(~t_ori,tmp); // order 3^178 & 3^117
    end for;
    for i in [1..56] do
        tmp := cube_Fp2_cycl(tmp); 
    end for;
    Append(~t_ori,tmp); // order 3^61
    LUT_0:=[tmp];
    for i in [1..5] do
        tmp := cube_Fp2_cycl(tmp); 
    end for;
    Append(~t_ori,tmp); // order 3^56
    for i in [1..10] do
        tmp := cube_Fp2_cycl(tmp); 
    end for;
    LUT_0[2]:=tmp;
    for i in [2..3] do
        for j in [1..15] do
            tmp := cube_Fp2_cycl(tmp); 
        end for;
        Append(~LUT_0,tmp); // order 3^61 & 3^46 & 3^31 & 3^16
    end for;
    tmp := cube_Fp2_cycl(tmp); 
    LUT_1:=[tmp]; 
    for i in [1..4] do
        for j in [1..3] do
            tmp := cube_Fp2_cycl(tmp); 
        end for;
        Append(~LUT_1,tmp); // order 3^15 & 3^12 -- 3^3
    end for;
    LUT := [tmp];
    for i in [1..2] do
        Append(~LUT, cube_Fp2_cycl(LUT[i])); // order 3^2 & 3
    end for;
    Append(~LUT, inv_Fp2_cycl(LUT[3])); // invert last element back for
                                        //comparisons in phn functions 
    
    return t_ori, LUT, LUT_0, LUT_1;
end function;



ph_3 := function(phiP,phiQ,PS,QS,A);

    eqp,r0,t0,r1,t1 := Tate_pairings_3_torsion_triple(QS,PS,phiP,phiQ,A);

    //n := [61,56,15,1,3,0,0,0,15,11,3,2];
    
    t_ori, LUT, LUT_0, LUT_1 := build_LUTs_3(eqp);

    a0 := phn61_3(r0,t_ori,LUT,LUT_0,LUT_1);
    b0 := phn61_3(r1,t_ori,LUT,LUT_0,LUT_1);
    b0 := 3^239 - b0;
    a1 := phn61_3(t0,t_ori,LUT,LUT_0,LUT_1);
    b1 := phn61_3(t1,t_ori,LUT,LUT_0,LUT_1);
    b1 := 3^239 - b1;

    return a0,b0,a1,b1;
end function;


